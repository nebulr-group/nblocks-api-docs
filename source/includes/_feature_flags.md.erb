# Feature flags
Feature flags allows you to conditionally give access to or show / hide features or content to your users.

To use feature flags you must first create **Flags** and link them with **Segments**. 
Then you can start making **Evaluation** calls where you provide the current **[Context](#feature-flags-evaluation-context)** and the API will take care of matching the context with the segments and returns if the flag is enabled or not.

Some use cases for feature flags are:

- Restrict access to premium content that just users with a certain plan can access
- Try beta features on a selection of customers
- Show a message to all users during a scheduled release.

<aside class="notice">
Segments are called Groups in the Nblocks Admin UI. They represent exactly the same entity.
</aside>

## Evaluate a flag

> Request example

```typescript
const response = await client.flag.evaluate("flag_1", {
        context: {
            user: {
                id: "63d2ab029e23db0afb07a5a7",
                role: "ADMIN",
                name: "John Doe",
                email: "john@doe.com",
                key: "custom-user-trait"
            },
            tenant: {
                id: "66238feb99227400774266f5",
                plan: "PREMIUM",
                name: "My Workspace",
                key: "custom-customer-trait",
            },
            device: {
                key: "iphone"
            },
            custom: {
                property1: "value1",
                property2: "value2",
                property3: "value2",
            }
        },
        accessToken: "XXXXXX"
    }
);
```

```shell
curl --request POST '<%= config[:backendless_api_url] %>/flags/evaluate/605b603cfeb49f00082686b6/iphone-feature' \
--data-raw '{
    "context": {
        "user": {
            "id": "63d2ab029e23db0afb07a5a7",
            "role": "ADMIN",
            "name": "John Doe",
            "email": "john@doe.com",
            "key": "custom-user-trait"
        },
        "tenant": {
            "id": "66238feb99227400774266f5",
            "plan": "PREMIUM",
            "name": "My Workspace",
            "key": "custom-customer-trait",
        },
        "device": {
            "key": "iphone"
        },
        "custom": {
            "property1": "value1",
            "property2": "value2",
            "property3": "value2",
        }
    },
    "accessToken": "XXXXXX"
}'
```

> Response example:

```json
{
    "enabled": true
}
```

Evaluate a single flag by providing context or user access token.

<%= partial "/includes/feature_flags_context.md" %>

### HTTP Request

`POST <%= config[:backendless_api_url] %>/flags/evaluate/APP_ID/FLAG_KEY`

<aside class="success">
The evaluation api doesn't require authentication. It can be called from unsafe enviroments like user clients.
</aside>

### URL Parameters
| Parameter | Description        |
| --------- | ------------------ |
| APP_ID    | Your app id        |
| FLAG_ID   | The ID of the flag |

### Body Parameters
| Parameter   | Type                                         | Required | Description      |
| ----------- | -------------------------------------------- | -------- | ---------------- |
| context     | [Context](#feature-flags-evaluation-context) | No       | A context object |
| accessToken | string                                       | No       | A user access token    |

<%= partial "/includes/response_success.md" %>
| Parameter | Type    | Description                                                                                    |
| --------- | ------- | ---------------------------------------------------------------------------------------------- |
| enabled   | boolean | Evaluation result. If the flag is enabled or not. Use this to conditionally render the feature |

<aside class="success">
The evaluation api doesn't require authentication. It can be called from unsafe enviroments like user clients.
</aside>

## Evaluate flags in bulk
> Request example

```typescript
const response = await client.flag.bulkEvaluate({
        context: {
            user: {
                id: "63d2ab029e23db0afb07a5a7",
                role: "ADMIN",
                name: "John Doe",
                email: "john@doe.com",
                key: "custom-user-trait"
            },
            tenant: {
                id: "66238feb99227400774266f5",
                plan: "PREMIUM",
                name: "My Workspace",
                key: "custom-customer-trait",
            },
            device: {
                key: "iphone"
            },
            custom: {
                property1: "value1",
                property2: "value2",
                property3: "value2",
            }
        },
        accessToken: "XXXXXX"
    }
);
```

```shell
curl --request POST '<%= config[:backendless_api_url] %>/flags/bulkEvaluate/605b603cfeb49f00082686b6' \
--data-raw '{
    "context": {
        "user": {
            "id": "63d2ab029e23db0afb07a5a7",
            "role": "ADMIN",
            "name": "John Doe",
            "key": "custom-user-trait"
        },
        "org": {
            "id": "66238feb99227400774266f5",
            "plan": "PREMIUM",
            "name": "My Workspace",
            "key": "custom-customer-trait",
        },
        "device": {
            "key": "iphone"
        }
    },
    "accessToken": "XXXXXX"
}'
```

> Response example:

```json
{
    "flags": [
        {
            "flag": "iphone-feature",
            "evaluation": {
                "enabled": true
            }
        }
    ]
}
```

Evaluate all flags in bulk by providing context or user access token. Use this to limit the amount of individual flag evaluation calls

<%= partial "/includes/feature_flags_context.md" %>

### HTTP Request

`POST <%= config[:backendless_api_url] %>/flags/bulkEvaluate/APP_ID`

<aside class="success">
The evaluation api doesn't require authentication. It can be called from unsafe enviroments like user clients.
</aside>

### URL Parameters
| Parameter | Description |
| --------- | ----------- |
| APP_ID    | Your app id |

### Body Parameters
| Parameter   | Type                                         | Required | Description      |
| ----------- | -------------------------------------------- | -------- | ---------------- |
| context     | [Context](#feature-flags-evaluation-context) | No       | A context object |
| accessToken | string                                       | No       | A user access token     |

<%= partial "/includes/response_success.md" %>
| Parameter | Type            | Description                                  |
| --------- | --------------- | -------------------------------------------- |
| flags     | EvaluatedFlag[] | Individual evaluation response for each flag |

**EvaluatedFlag**

| Parameter  | Type               | Description             |
| ---------- | ------------------ | ----------------------- |
| flag       | string             | Flag key                |
| evaluation | EvaluationResponse | The evaluation response |

**EvaluationResponse**

| Parameter | Type    | Description                                                                 |
| --------- | ------- | --------------------------------------------------------------------------- |
| enabled   | boolean | If the flag is enabled or not. Use this to conditionally render the feature |


<aside class="success">
The evaluation api doesn't require authentication. It can be called from unsafe enviroments like user clients.
</aside>

## List segments

> Request example

```typescript
const response = await client.flagAdmin.listSegments();
```

```shell
curl --request GET '<%= config[:admin_api_url] %>/flags/segment' \
--header 'x-api-key: <%= config[:api_key] %>'
```

> Response example:

```json
[
    {
        "id": "64c63e7adaf20f0008e71b20",
        "key": "iphones",
        "description": "This segment targets iPhones",
        "targets": [
            {
                "device": {
                    "key": {
                        "operator": "contains",
                        "value": "iphone"
                    }
                }
            }
        ]
    },
    {
        "id": "64c6400fdaf20f0008e71b25",
        "key": "admins",
        "description": "This segment targets admins",
        "targets": [
            {
                "user": {
                    "role": {
                        "operator": "eq",
                        "value": "ADMIN"
                    }
                }
            }
        ]
    }
]
```

List all segments

<aside class="notice">
Segments are called Groups in the Nblocks Admin UI. They represent exactly the same entity.
</aside>

### HTTP Request

`GET <%= config[:admin_api_url] %>/flags/segments`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

<%= partial "/includes/response_success.md" %>
List of [Segment](#feature-flags-segment)

## Create a segment

> Request example

```typescript
const response = await client.flagAdmin.createSegment({
    key: "admins",
    description: "This segment targets admins",
    targets: [
        {
            user: {
                role: {
                    operator: "eq",
                    value: "ADMIN"
                }
            }
        }
    ]
});
```

```shell
curl --request POST '<%= config[:admin_api_url] %>/flags/segment' \
--header 'x-api-key: <%= config[:api_key] %>' \
--data-raw '{
    "key": "admins",
    "description": "This segment targets admins",
    "targets": [
        {
            "user": {
                "role": {
                    "operator": "eq",
                    "value": "ADMIN"
                }
            }
        }
    ]
}'
```

> Response example:

```json
{
    "id": "64c6400fdaf20f0008e71b25",
    "key": "admins",
    "description": "This segment targets admins",
    "targets": [
        {
            "user": {
                "role": {
                    "operator": "eq",
                    "value": "ADMIN"
                }
            }
        }
    ]
}
```

Create a segment

### HTTP Request

`POST <%= config[:admin_api_url] %>/flags/segment`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

### Body Parameters
| Parameter   | Type                                      | Required | Description                   |
| ----------- | ----------------------------------------- | -------- | ----------------------------- |
| key         | string                                    | Yes      | A unique key for this segment |
| description | string                                    | No       | Optional description          |
| targets     | [Target](#feature-flags-segment-target)[] | No       | The targets to match. Multiple targets must all match (logical AND) for the segment to match          |

<%= partial "/includes/response_success.md" %>
[Segment](#feature-flags-segment)

## Update a segment

> Request example

```typescript
const response = await client.flagAdmin.updateSegment("667447b583e592454b76d0ec", {
        description: 'This is a description'
    }
);
```

```shell
curl --request PUT '<%= config[:admin_api_url] %>/flags/segment/64c6400fdaf20f0008e71b25' \
--header 'x-api-key: <%= config[:api_key] %>' \
--data-raw '{
    "description": "Updated description",
}'
```

> Response example:

```json
{
    "id": "64c6400fdaf20f0008e71b25",
    "key": "admins",
    "description": "Updated description",
    "targets": [
        {
            "user": {
                "role": {
                    "operator": "eq",
                    "value": "ADMIN"
                }
            }
        }
    ]
}
```

Update an existing segment

### HTTP Request

`PUT <%= config[:admin_api_url] %>/flags/segment/SEGMENT_ID`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

### URL Parameters
| Parameter  | Description           |
| ---------- | --------------------- |
| SEGMENT_ID | The ID of the segment |

### Body Parameters
| Parameter   | Type                                      | Required | Description                   |
| ----------- | ----------------------------------------- | -------- | ----------------------------- |
| key         | string                                    | No       | A unique key for this segment |
| description | string                                    | No       | Optional description          |
| targets     | [Target](#feature-flags-segment-target)[] | No       | The targets to match. Multiple targets must all match (logical AND) for the segment to match          |

<%= partial "/includes/response_success.md" %>
[Segment](#feature-flags-segment)

## Delete a segment

> Request example

```typescript
await client.flagAdmin.deleteSegment("6674409b7bc7fe186ab98a56");
```

```shell
curl --request DELETE '<%= config[:admin_api_url] %>/flags/segment/64c6400fdaf20f0008e71b25' \
--header 'x-api-key: <%= config[:api_key] %>'
```

Delete an existing segment. Deleting a segment will also remove the relationship with affected flags. 

### HTTP Request

`DELETE <%= config[:admin_api_url] %>/flags/segment/SEGMENT_ID`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

### URL Parameters
| Parameter  | Description           |
| ---------- | --------------------- |
| SEGMENT_ID | The ID of the segment |

<%= partial "/includes/response_success.md" %>

## List flags

> Request example

```typescript
const response = await client.flagAdmin.listFlags();
```

```shell
curl --request GET '<%= config[:admin_api_url] %>/flags/flags' \
--header 'x-api-key: <%= config[:api_key] %>'
```

> Response example:

```json
[
    {
        "id": "64c64cfb47418500082f60b5",
        "key": "iphone-feature",
        "description": "A feature for iPhones",
        "defaultValue": false,
        "segments": [
            {
                "id": "64c63e7adaf20f0008e71b20",
                "key": "iphones",
                "description": "This segment targets iPhones",
                "targets": [
                    {
                        "device": {
                            "key": "iphone"
                        }
                    }
                ]
            }
        ],
        "targetValue": true,
        "enabled": true
    }
]
```

List all segments

### HTTP Request

`GET <%= config[:admin_api_url] %>/flags/flags`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

<%= partial "/includes/response_success.md" %>
List of [Flag](#feature-flags-flag)

## Create a flag

> Request example

```typescript
const response = await client.flagAdmin.createFlag({
    key: "iphone-feature",
    description: "A feature for iPhones",
    defaultValue: false,
    segments: [
        "64c63e7adaf20f0008e71b20"
    ],
    targetValue: true,
    enabled: true
});
```

```shell
curl --request POST '<%= config[:admin_api_url] %>/flags/flag' \
--header 'x-api-key: <%= config[:api_key] %>' \
--data-raw '{
    "key": "iphone-feature",
    "description": "A feature for iPhones",
    "defaultValue": false,
    "segments": [
        "64c63e7adaf20f0008e71b20"
    ],
    "targetValue": true,
    "enabled": true
}'
```

> Response example:

```json
{
    "id": "64c64cfb47418500082f60b5",
    "key": "iphone-feature",
    "description": "A feature for iPhones",
    "defaultValue": false,
    "segments": [
        {
            "id": "64c63e7adaf20f0008e71b20",
            "key": "iphones",
            "description": "This segment targets iPhones",
            "targets": [
                {
                    "device": {
                        "key": "iphone"
                    }
                }
            ]
        }
    ],
    "targetValue": true,
    "enabled": true
}
```

Create a flag

### HTTP Request

`POST <%= config[:admin_api_url] %>/flags/flag`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

### Body Parameters
| Parameter    | Type     | Required | Description                                                                                              |
| ------------ | -------- | -------- | -------------------------------------------------------------------------------------------------------- |
| key          | string   | Yes      | A unique key for this flag                                                                               |
| description  | string   | No       | Optional description                                                                                     |
| defaultValue | boolean  | No       | The value to return if no segment was found or matched                                                   |
| segments     | string[] | No       | List of IDs of the segments which should be matched. If any of the segment match (logical OR), the flag is matched                                                      |
| targetValue  | boolean  | No       | The value to return of a segment was matched                                                             |
| enabled      | boolean  | No       | Active state. Only enabled flags are available for evaluation. Otherwise evaluation falls back to false. |

<%= partial "/includes/response_success.md" %>
[Flag](#feature-flags-flag)

## Update a flag

> Request example

```typescript
const response = await client.flagAdmin.updateFlag("667447b583e592454b76d0ec", {
        description: 'This is a description'
    }
);
```

```shell
curl --request PUT '<%= config[:admin_api_url] %>/flags/flag/64c6400fdaf20f0008e71b25' \
--header 'x-api-key: <%= config[:api_key] %>' \
--data-raw '{
    "enabled": false,
}'
```

> Response example:

```json
{
    "id": "64c64cfb47418500082f60b5",
    "key": "iphone-feature",
    "description": "A feature for iPhones",
    "defaultValue": false,
    "segments": [
        {
            "id": "64c63e7adaf20f0008e71b20",
            "key": "iphones",
            "description": "This segment targets iPhones",
            "targets": [
                {
                    "device": {
                        "key": "iphone"
                    }
                }
            ]
        }
    ],
    "targetValue": true,
    "enabled": false
}
```

Update an existing flag

### HTTP Request

`PUT <%= config[:admin_api_url] %>/flags/segment/FLAG_ID`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

### URL Parameters
| Parameter | Description        |
| --------- | ------------------ |
| FLAG_ID   | The ID of the flag |

### Body Parameters
| Parameter    | Type     | Required | Description                                                                                              |
| ------------ | -------- | -------- | -------------------------------------------------------------------------------------------------------- |
| key          | string   | No       | A unique key for this flag                                                                               |
| description  | string   | No       | Optional description                                                                                     |
| defaultValue | boolean  | No       | The value to return if no segment was found or matched                                                   |
| segments     | string[] | No       | List of IDs of the segments which should be matched. If any of the segment match (logical OR), the flag is matched                                                       |
| targetValue  | boolean  | No       | The value to return of a segment was matched                                                             |
| enabled      | boolean  | No       | Active state. Only enabled flags are available for evaluation. Otherwise evaluation falls back to false. |

<%= partial "/includes/response_success.md" %>
[Flag](#feature-flags-flag)

## Delete a flag

> Request example

```typescript
await client.flagAdmin.deleteFlag("6674409b7bc7fe186ab98a56");
```

```shell
curl --request DELETE '<%= config[:admin_api_url] %>/flags/flag/64c6400fdaf20f0008e71b25' \
--header 'x-api-key: <%= config[:api_key] %>'
```

Delete an existing flag. 

### HTTP Request

`DELETE <%= config[:admin_api_url] %>/flags/flag/FLAG_ID`

### Headers
| Parameter | Type   | Required | Description      |
| --------- | ------ | -------- | ---------------- |
| x-api-key | string | Required | Your app api key |

### URL Parameters
| Parameter | Description        |
| --------- | ------------------ |
| FLAG_ID   | The ID of the flag |

<%= partial "/includes/response_success.md" %>